var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Ion","category":"page"},{"location":"#Ion","page":"Home","title":"Ion","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Ion]","category":"page"},{"location":"#Ion.COMMAND_ENTRY_DOC_STUB","page":"Home","title":"Ion.COMMAND_ENTRY_DOC_STUB","text":"CLI&REPL toolkit for managing/developing Julia project & packages.\n\n\n\n\n\n","category":"constant"},{"location":"#Ion.clone-Tuple","page":"Home","title":"Ion.clone","text":"clone(package_or_url::String, to::String=pwd(); force::Bool=false)\n\nClone a package or remote URL to a local directory. \n\nIntro\n\nThis command helps you clone a remote package repo from github. The corresponding package or repo name will automatically remove the .jl extension if it has one, e.g https://github.com/JuliaLang/Example.jl will be downloaded as Example. And when cloning a repo that has no write access, it will prompt to ask for a fork.\n\nArguments\n\npackage_or_url: package name or URL.\nto: local directory to download the git repo to.\n\nFlags\n\n-f,--force: force overwrite existing path.\n\n\n\n\n\n\n\n","category":"method"},{"location":"#Ion.comonicon_install-Tuple{}","page":"Home","title":"Ion.comonicon_install","text":"comonicon_install(;kwargs...)\n\nInstall the CLI manually. This will use the default configuration in Comonicon.toml, if it exists. For more detailed reference, please refer to Comonicon documentation.\n\n\n\n\n\n","category":"method"},{"location":"#Ion.comonicon_install_path-Tuple{}","page":"Home","title":"Ion.comonicon_install_path","text":"comonicon_install_path(;[yes=false])\n\nInstall the PATH and FPATH to your shell configuration file. You can use comonicon_install_path(;yes=true) to skip interactive prompt. For more detailed reference, please refer to Comonicon documentation.\n\n\n\n\n\n","category":"method"},{"location":"#Ion.compat-Tuple","page":"Home","title":"Ion.compat","text":"compat(version_spec::String=\"auto\", path_to_project::String=pwd(); package::String=\"\", overwrite::Bool=false)\n\ncreate and update compat in Project.toml via command line.\n\nIntro\n\nBy default the auto update the compat to latest non-breaking version by semantic version definition (latest minor version for 0.x.y, latest major version for other case). One can select only updating specific packages by using the package option.\n\nArguments\n\nversion_spec: version_spec to be compatible with, can be patch, minor, major or auto.\npath_to_project: path to the project, default is the current working directory.\n\nOptions\n\n-p,--package=<name>: package selector, use this option to update specified package compat only.\n\nFlags\n\n--overwrite: force update all compat by overwrite old compat.\n\n\n\n\n\n\n\n","category":"method"},{"location":"#Ion.release","page":"Home","title":"Ion.release","text":"release(version_spec[, path=pwd()]; kw...)\n\nRelease a new version for a package, e.g\n\njulia> pwd()\n\"/home/roger/julia/Comonicon\"\n\njulia> Ion.release(patch) # will release a new patch version on github\n\nArguments\n\nversion_spec: required, semantic version bump (patch, minor, major, current)   or a specific version number to release (VersionNumber or valid version string).\npath: optional, path to the pacakge to release, default is pwd().\n\nKeyword Arguments\n\nregistry: optional, name of the registry to register, if not specified, will lookup   if the package has been registered in local registries.\nbranch: optional, branch to register, default is current branch.\nnote: optional, release note.\n\n\n\n\n\n","category":"function"}]
}
